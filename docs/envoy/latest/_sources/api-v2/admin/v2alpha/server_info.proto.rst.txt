.. _envoy_api_file_envoy/admin/v2alpha/server_info.proto:

Server State
============


.. _envoy_api_msg_admin.v2alpha.ServerInfo:

admin.v2alpha.ServerInfo
------------------------

`[admin.v2alpha.ServerInfo proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/admin/v2alpha/server_info.proto#L10>`_

Proto representation of the value returned by /server_info, containing
server version/server status information.

.. code-block:: json

  {
    "version": "...",
    "state": "...",
    "uptime_current_epoch": "{...}",
    "uptime_all_epochs": "{...}",
    "epoch": "..."
  }

.. _envoy_api_field_admin.v2alpha.ServerInfo.version:

version
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Server version.
  
  
.. _envoy_api_field_admin.v2alpha.ServerInfo.state:

state
  (:ref:`admin.v2alpha.ServerInfo.State <envoy_api_enum_admin.v2alpha.ServerInfo.State>`) State of the server.
  
  
.. _envoy_api_field_admin.v2alpha.ServerInfo.uptime_current_epoch:

uptime_current_epoch
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Uptime since current epoch was started.
  
  
.. _envoy_api_field_admin.v2alpha.ServerInfo.uptime_all_epochs:

uptime_all_epochs
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Uptime since the start of the first epoch.
  
  
.. _envoy_api_field_admin.v2alpha.ServerInfo.epoch:

epoch
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Which restart epoch the server is currently in.
  
  

.. _envoy_api_enum_admin.v2alpha.ServerInfo.State:

Enum admin.v2alpha.ServerInfo.State
-----------------------------------

`[admin.v2alpha.ServerInfo.State proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/admin/v2alpha/server_info.proto#L14>`_


.. _envoy_api_enum_value_admin.v2alpha.ServerInfo.State.LIVE:

LIVE
  *(DEFAULT)* ⁣Server is live and serving traffic.
  
  
.. _envoy_api_enum_value_admin.v2alpha.ServerInfo.State.DRAINING:

DRAINING
  ⁣Server is draining listeners in response to external health checks failing.
  
  
